self.addEventListener("install",n=>{console.log("[SW] Installed"),self.skipWaiting()});self.addEventListener("activate",n=>{console.log("[SW] Activated")});const r="request-queue",s="requests";function a(){return new Promise((n,t)=>{const e=indexedDB.open(r,1);e.onupgradeneeded=()=>{e.result.createObjectStore(s,{autoIncrement:!0})},e.onsuccess=()=>n(e.result),e.onerror=()=>t(e.error)})}async function c(n){const e=(await a()).transaction(s,"readwrite");return e.objectStore(s).add(n),e.complete}self.addEventListener("fetch",n=>{console.log("fetch event",n);const{request:t}=n;t.method==="POST"&&t.headers.get("Content-Type")?.includes("application/json")&&n.respondWith((async()=>{try{const o=await t.clone().json();return navigator.onLine?fetch(t):(await c({url:t.url,method:t.method,headers:[...t.headers],body:o}),new Response(JSON.stringify({message:"Request saved. Will be sent when online."}),{status:202,headers:{"Content-Type":"application/json"}}))}catch{return new Response("Error handling request",{status:500})}})())});
